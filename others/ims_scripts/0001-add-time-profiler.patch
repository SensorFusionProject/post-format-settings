From 76602ba9a991624296adefefa5942e50b208e0db Mon Sep 17 00:00:00 2001
From: "JoSH@LGECNN" <seunghyeon.jo@lge.com>
Date: Mon, 26 Jul 2021 11:20:47 +0900
Subject: [PATCH] add time profiler

Change-Id: I8f8df5bc22688a1e58b48c65572c7ab266ec46e5
---
 craft/common/support/include/util/Logger.h    | 68 +++++++++++++++++++
 .../ncnn/ActrInferenceEngine.cpp              |  2 +
 .../nnctrl/ActrInferenceEngine.cpp            |  2 +
 .../ActionRecognition/source/ActrManager.cpp  |  2 +
 .../source/ActrPostProcessing.cpp             |  2 +
 .../source/ActrPreProcessing.cpp              |  2 +
 .../source/BlockageDetectionMgr.cpp           |  4 ++
 .../source/Classifier.cpp                     |  4 ++
 .../source/TamperDetector.cpp                 |  8 +++
 .../source/YawnNSpeakingDetector.cpp          |  2 +
 .../hera/src/common/IntensityController.cpp   |  2 +
 craft/het/hera/src/detection/HeraDetector.cpp |  5 ++
 .../platform/framework/core/LocalDataBus.cpp  |  6 +-
 craft/platform/framework/core/SubEngine.cpp   |  4 +-
 .../ActionRecognitionEngine.cpp               |  2 +
 .../engine/areaOfInterest/AoiEngine.cpp       |  2 +
 .../cameraBlockage/CameraBlockageEngine.cpp   |  2 +
 .../DistractionDetectionEngine.cpp            |  6 ++
 .../DrowsinessDetectionEngine.cpp             |  2 +
 .../DrowsinessLongClosure.cpp                 |  6 ++
 .../drowsinessDetection/DrowsinessPerclos.cpp |  2 +
 .../drowsinessDetection/DrowsinessYawn.cpp    |  6 ++
 .../faceRecognition/FaceRecognitionEngine.cpp |  4 ++
 .../framework/engine/fatigueMetrics/Blink.cpp |  6 ++
 .../fatigueMetrics/FatigueMetricsEngine.cpp   |  3 +
 .../engine/fatigueMetrics/Perclos.cpp         |  4 ++
 .../engine/het_hera/HeraSubEngine.cpp         |  2 +
 .../SpoofingDetectionEngine.cpp               |  2 +
 .../YawnNSpeakingDetectionEngine.cpp          |  3 +
 .../aoiDevelopmentEngine/AoiDevEngine.cpp     |  2 +
 .../CommandServerEngine.cpp                   |  3 +
 .../support/dsmDemoEngine/DsmDemoEngine.cpp   |  2 +
 .../frameRecorderEngine/FrameCapture.cpp      |  2 +
 .../FrameRecorderEngine.cpp                   |  2 +
 .../frameRecorderEngine/FrameRecording.cpp    |  2 +
 .../support/miniDemoEngine/MiniDemoEngine.cpp |  2 +
 .../PerformanceMonitorEngine.cpp              |  2 +
 .../ResultRecorderEngine.cpp                  |  2 +
 .../ResultStreamingEngine.cpp                 |  2 +
 .../sdkInterfaceEngine/SdkInterfaceEngine.cpp |  2 +
 .../sdkInterfaceEngine/SdkInterfaceEngine.h   | 22 ++++++
 .../virtualHetEngine/VirtualHetEngine.cpp     |  2 +
 42 files changed, 208 insertions(+), 4 deletions(-)

diff --git a/craft/common/support/include/util/Logger.h b/craft/common/support/include/util/Logger.h
index 8ad347049..f82b03491 100644
--- a/craft/common/support/include/util/Logger.h
+++ b/craft/common/support/include/util/Logger.h
@@ -87,6 +87,74 @@ public:
 	static void setLoggingType( const logType loggingType );
 };
 
+#include <sstream>
+using namespace std;
+
+class CoolTimer {
+public:
+    CoolTimer()
+        : m_fn_name_size(0)
+    {}
+    CoolTimer(const char* str)
+        : m_fn_name_size(0)
+    {
+		On(str);
+	}
+    ~CoolTimer() {}
+
+    void On(const char* str) {
+        // Get the name of the function.
+        m_fn_name_size = strlen(str) + 1;
+        memcpy(m_fn_name, str, sizeof(char)*m_fn_name_size);
+
+        // Start.
+        _QueryPerformanceCounter(&m_begin);
+        ostringstream os;
+        os << "NPU Processing Time:\t"  << m_fn_name << "\tstarted!!\n";
+        LOG_WARNING << os.str();
+    }
+
+    void Off() {
+        // End.
+        _QueryPerformanceCounter(&m_end);
+
+        // Calculate the time.
+        long seconds = m_end.tv_sec - m_begin.tv_sec;
+        long nanoseconds = m_end.tv_nsec - m_begin.tv_nsec;
+        double elapsed = seconds + nanoseconds*1e-9;
+		elapsed *= 1e3;
+
+        // Print the message.
+        ostringstream os;
+        os << "NPU Processing Time:\t"  << m_fn_name << "\t" << elapsed << "\tms\n";
+        LOG_WARNING << os.str();
+    }
+private:
+    /* These functions are written to match the win32
+    signatures and behavior as closely as possible.
+    */
+    bool _QueryPerformanceFrequency(timespec* frequency) {
+        /* Sanity check. */
+        //assert(frequency != nullptr);
+        /* gettimeofday reports to microsecond accuracy. */
+        clock_getres(CLOCK_REALTIME, frequency);
+        return true;
+    }
+
+    bool _QueryPerformanceCounter(timespec* performance_count) {
+        /* Sanity check. */
+        //assert(performance_count != nullptr);
+        /* Grab the current time. */
+        clock_gettime(CLOCK_REALTIME, performance_count);
+        return true;
+    }
+
+    timespec m_begin;
+    timespec m_end;
+    char m_fn_name[128];
+    size_t m_fn_name_size;
+};
+
 } /* namespace SU */
 
 #endif /* _LOGGER_H_ */
\ No newline at end of file
diff --git a/craft/core/ActionRecognition/source/ActrInferenceEngine/ncnn/ActrInferenceEngine.cpp b/craft/core/ActionRecognition/source/ActrInferenceEngine/ncnn/ActrInferenceEngine.cpp
index c0af48c6e..876389768 100755
--- a/craft/core/ActionRecognition/source/ActrInferenceEngine/ncnn/ActrInferenceEngine.cpp
+++ b/craft/core/ActionRecognition/source/ActrInferenceEngine/ncnn/ActrInferenceEngine.cpp
@@ -116,6 +116,7 @@ bool
 ActrInferenceEngine::prediction( const ActrImage::MultiCropData& inMultiCropData,
 		Core::ActionRecognition::ActrResInfo& outActrResInfoCur )
 {
+	SU::CoolTimer Timer("In ncnn/ActrInferenceEngine::prediction\taction detection");
 	bool result = false;
 
 	/* normalized value (input data for CNN) */
@@ -200,6 +201,7 @@ ActrInferenceEngine::prediction( const ActrImage::MultiCropData& inMultiCropData
 			}
 		}
 	}
+	Timer.Off();
 	return result;
 }
 
diff --git a/craft/core/ActionRecognition/source/ActrInferenceEngine/nnctrl/ActrInferenceEngine.cpp b/craft/core/ActionRecognition/source/ActrInferenceEngine/nnctrl/ActrInferenceEngine.cpp
index 052906a4e..d086a9266 100755
--- a/craft/core/ActionRecognition/source/ActrInferenceEngine/nnctrl/ActrInferenceEngine.cpp
+++ b/craft/core/ActionRecognition/source/ActrInferenceEngine/nnctrl/ActrInferenceEngine.cpp
@@ -115,6 +115,7 @@ bool
 ActrInferenceEngine::prediction( const ActrImage::MultiCropData& inMultiCropData,
 		Core::ActionRecognition::ActrResInfo& outActrResInfoCur )
 {
+	SU::CoolTimer Timer("In nnctrl/ActrInferenceEngine::prediction\taction detection");
 	bool result = false;
 
 	/* normalized value (input data for CNN) */
@@ -194,6 +195,7 @@ ActrInferenceEngine::prediction( const ActrImage::MultiCropData& inMultiCropData
 			}
 		}
 	}
+	Timer.Off();
 	return result;
 }
 
diff --git a/craft/core/ActionRecognition/source/ActrManager.cpp b/craft/core/ActionRecognition/source/ActrManager.cpp
index 9ebcde61f..ddd436e26 100755
--- a/craft/core/ActionRecognition/source/ActrManager.cpp
+++ b/craft/core/ActionRecognition/source/ActrManager.cpp
@@ -55,6 +55,7 @@ bool
 ActrManager::run( const FrameDataInfo& frameDataInfo, ActrResInfo& outCurData,
 		ActrResInfo& outSeqData, ActrTemporalResInfo& outTemporalData )
 {
+	SU::CoolTimer Timer("In ActrManager::run\taction detection");
 	bool isAvaliable = false;
 
 	if ( frameDataInfo.buffer != nullptr )
@@ -74,6 +75,7 @@ ActrManager::run( const FrameDataInfo& frameDataInfo, ActrResInfo& outCurData,
 		}
 	}
 
+	Timer.Off();
 	return isAvaliable;
 }
 
diff --git a/craft/core/ActionRecognition/source/ActrPostProcessing.cpp b/craft/core/ActionRecognition/source/ActrPostProcessing.cpp
index d7298f35e..2bd71135f 100755
--- a/craft/core/ActionRecognition/source/ActrPostProcessing.cpp
+++ b/craft/core/ActionRecognition/source/ActrPostProcessing.cpp
@@ -56,6 +56,7 @@ ActrPostProcessing::postProcessing( const Core::ActionRecognition::ActrResInfo&
 		Core::ActionRecognition::ActrResInfo& outActrResInfoSeq,
 		Core::ActionRecognition::ActrTemporalResInfo& outActrTemporalSeq )
 {
+	SU::CoolTimer Timer("In ActrPostProcessing::postProcessing\taction detection");
 	bool result = false;
 	constexpr int32_t MAX_COUNT = 10;
 	constexpr float_t THRESHOLD[Core::ActionRecognition::ActionLabel::ACTR_END_IDX] =
@@ -194,6 +195,7 @@ ActrPostProcessing::postProcessing( const Core::ActionRecognition::ActrResInfo&
 
 		result = true;
 	}
+	Timer.Off();
 	return result;
 }
 
diff --git a/craft/core/ActionRecognition/source/ActrPreProcessing.cpp b/craft/core/ActionRecognition/source/ActrPreProcessing.cpp
index 45c4998f1..ac8af5ad1 100755
--- a/craft/core/ActionRecognition/source/ActrPreProcessing.cpp
+++ b/craft/core/ActionRecognition/source/ActrPreProcessing.cpp
@@ -345,6 +345,7 @@ bool
 preprocessing( const Core::ActionRecognition::FrameDataInfo& frameDataInfo,
 		ActrImage::MultiCropData& multiCropData )
 {
+	SU::CoolTimer Timer("In ActrPreProcessingAlgo::preprocessing\taction detection");
 	bool result = false;
 
 	if ( checkHetData( frameDataInfo ) == true )
@@ -496,6 +497,7 @@ preprocessing( const Core::ActionRecognition::FrameDataInfo& frameDataInfo,
 		alignedImage.release();
 	}
 
+	Timer.Off();
 	return result;
 }
 } /* namespace ActrPreProcessingAlgo end*/
diff --git a/craft/core/CameraBlockageDetection/source/BlockageDetectionMgr.cpp b/craft/core/CameraBlockageDetection/source/BlockageDetectionMgr.cpp
index a5b39ee68..274ff5da4 100644
--- a/craft/core/CameraBlockageDetection/source/BlockageDetectionMgr.cpp
+++ b/craft/core/CameraBlockageDetection/source/BlockageDetectionMgr.cpp
@@ -23,6 +23,8 @@
 #include <CameraBlockageDetection.h>
 #include <cmath>
 
+#include <util/Logger.h>
+
 namespace CB
 {
 
@@ -87,6 +89,7 @@ BlockageDetectionManager::init( const int32_t thresholdCloseBlockage,
 void
 BlockageDetectionManager::process( BlockageIn& inBlock, BlockageOut& outBlock )
 {
+	SU::CoolTimer Timer("In BlockageDetectionManager::process\tcamera blockage detection");
 	// If landmark is detected in certain image section, that image section should be non-blockage,
 	// although an obstruction of the field of view over 50% is satisfied
 	if ( mUseFaceBlockage == 1 )
@@ -192,6 +195,7 @@ BlockageDetectionManager::process( BlockageIn& inBlock, BlockageOut& outBlock )
 	}
 
 	mPreviousTime = inBlock.time;
+	Timer.Off();
 }
 
 Core::CameraBlockageOutput
diff --git a/craft/core/CameraBlockageDetection/source/Classifier.cpp b/craft/core/CameraBlockageDetection/source/Classifier.cpp
index bc31065d7..7b7fee2b6 100755
--- a/craft/core/CameraBlockageDetection/source/Classifier.cpp
+++ b/craft/core/CameraBlockageDetection/source/Classifier.cpp
@@ -23,6 +23,8 @@
 #include <CBStaticData.h>
 #include <FastMath.h>
 
+#include <util/Logger.h>
+
 #ifdef HAVE_NEON
 #include <arm_neon.h>
 #endif
@@ -92,12 +94,14 @@ Classifier::dimensionReduction( const float_t* const src, float_t* const dst )
 float_t
 Classifier::classify( const float_t* const feature ) const
 {
+	SU::CoolTimer Timer("In Classifier::classify\tcamera blockage detection");
 	float_t conf = 0.0F;
 	for ( int32_t i = 0; i < SUPPORT_NUM; i++ )
 	{
 		conf = conf + ( ( gAlpha[i] * gTarget[i] ) * evalKernel( i, feature ) );
 	}
 
+	Timer.Off();
 	return ( conf - CLASSIFIER_THRESHOLD );
 }
 
diff --git a/craft/core/CameraBlockageDetection/source/TamperDetector.cpp b/craft/core/CameraBlockageDetection/source/TamperDetector.cpp
index f27d2e1cb..252705d21 100755
--- a/craft/core/CameraBlockageDetection/source/TamperDetector.cpp
+++ b/craft/core/CameraBlockageDetection/source/TamperDetector.cpp
@@ -264,6 +264,7 @@ TamperDetector::init( const int32_t width, const int32_t widthStep, const int32_
 int32_t
 TamperDetector::update( const uint8_t* const src )
 {
+	SU::CoolTimer Timer("In TamperDetector::update\tcamera blockage detection");
 	int32_t ret = CB_OK;
 	if ( ( src == nullptr ) || ( mResizeSrc == nullptr ) )
 	{
@@ -319,6 +320,7 @@ TamperDetector::update( const uint8_t* const src )
 		}
 	}
 
+	Timer.Off();
 	return ret;
 }
 
@@ -330,6 +332,7 @@ TamperDetector::update( const uint8_t* const src,
 		const bool isMouthNoseBlocked, const uint64_t time,
 		Core::CameraBlockageOutput& cameraCloseBlocked )
 {
+	SU::CoolTimer Timer("In TamperDetector::update including process\tcamera blockage detection");
 	int32_t ret = CB_OK;
 
 	cameraCloseBlocked = Core::CameraBlockageOutput::NO_BLOCKAGE;
@@ -380,6 +383,7 @@ TamperDetector::update( const uint8_t* const src,
 		cameraCloseBlocked = mBlockageOut.filtered.cameraCloseBlocked;
 	}
 
+	Timer.Off();
 	return ret;
 }
 
@@ -423,6 +427,7 @@ void
 TamperDetector::extractFeatures( const uint8_t* const src, const int32_t widthStep,
 		const int32_t height, float_t* const feature )
 {
+	SU::CoolTimer Timer("In TamperDetector::extractFeatures\tcamera blockage detection");
 	resizeNN( src, widthStep, height, mResizeSrc, mResizeWidth, mResizeHeight );
 	dbgDisplay( mResizeWidth, mResizeHeight, mResizeSrc, "Resize" );
 
@@ -447,6 +452,7 @@ TamperDetector::extractFeatures( const uint8_t* const src, const int32_t widthSt
 			* static_cast<uint32_t>( FEATURE_BLOCK_LBP_DIM ) );
 	( void )memcpy( feature + FEATURE_BLOCK_LBP_DIM, parHOG, sizeof( float_t )
 			* static_cast<uint32_t>( FEATURE_HOG_DIM ) );
+	Timer.Off();
 }
 
 //Occlusion 여부를 판단
@@ -454,6 +460,7 @@ void
 TamperDetector::classification( const float_t* const feature, const int32_t threadIdx,
 		const float_t thres )
 {
+	SU::CoolTimer Timer("In TamperDetector::classification\tcamera blockage detection");
 	( void )mClassifier.dimensionReduction( feature, mReducedFeature[threadIdx] );
 	mConf[threadIdx] = mClassifier.classify( mReducedFeature[threadIdx] );
 
@@ -474,6 +481,7 @@ TamperDetector::classification( const float_t* const feature, const int32_t thre
 	{
 		mBlock[threadIdx] = false;
 	}
+	Timer.Off();
 }
 
 void
diff --git a/craft/core/yawnNSpeakingDetection/source/YawnNSpeakingDetector.cpp b/craft/core/yawnNSpeakingDetection/source/YawnNSpeakingDetector.cpp
index 895a3f486..fd744425b 100644
--- a/craft/core/yawnNSpeakingDetection/source/YawnNSpeakingDetector.cpp
+++ b/craft/core/yawnNSpeakingDetection/source/YawnNSpeakingDetector.cpp
@@ -292,6 +292,7 @@ YawnNSpeakingDetector::run(
 		const Core::HetDataYSD& hetData,
 		Core::YSDResultData& ysdResultData )
 {
+	SU::CoolTimer Timer("In YawnNSpeakingDetector::run\tyawn and speaking detection");
 	bool success = false;
 
 	if ( mIsValid == true )
@@ -368,6 +369,7 @@ YawnNSpeakingDetector::run(
 		}
 	}
 
+	Timer.Off();
 	return success;
 }
 
diff --git a/craft/het/hera/src/common/IntensityController.cpp b/craft/het/hera/src/common/IntensityController.cpp
index 838cf3e39..4255060ad 100644
--- a/craft/het/hera/src/common/IntensityController.cpp
+++ b/craft/het/hera/src/common/IntensityController.cpp
@@ -30,6 +30,7 @@ IntensityController::IntensityController() :
 bool
 IntensityController::algorithm( PipelineBlob& blob )
 {
+	SU::CoolTimer Timer("In IntensityController::algorithm\thet");
 	bool ret = HERA_SUCCESS;
 	if ( mControllableMain )
 	{
@@ -109,6 +110,7 @@ IntensityController::algorithm( PipelineBlob& blob )
 	blob.intensityMainSignal = mMainSignal;
 	blob.intensitySubSignal = mSubSignal;
 
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/het/hera/src/detection/HeraDetector.cpp b/craft/het/hera/src/detection/HeraDetector.cpp
index 4cfd82b06..ce9101b47 100644
--- a/craft/het/hera/src/detection/HeraDetector.cpp
+++ b/craft/het/hera/src/detection/HeraDetector.cpp
@@ -134,6 +134,7 @@ HeraDetector::init( int32_t width, int32_t height,
 		// Landmarks filter
 		mPipelineBlocks.push_back( &mHeadFilterStage );
 
+
 		// LED controller
 		mMainControl = mainParam;
 		mSubControl = subParam;
@@ -156,6 +157,7 @@ HeraDetector::init( int32_t width, int32_t height,
 int32_t
 HeraDetector::algorithm( uint8_t* const imageBuffer, HeraResult& heraResult )
 {
+	SU::CoolTimer Timer("In HeraDetector::algorithm\thet");
 	int32_t res = SUCCESS;
 	bool algorithmRet;
 
@@ -163,7 +165,9 @@ HeraDetector::algorithm( uint8_t* const imageBuffer, HeraResult& heraResult )
 
 	for ( const auto &stage : mPipelineBlocks )
 	{
+		SU::CoolTimer StTimer(("In HeraDetector::algorithm {"+stage->name()+"}\thet").c_str());
 		algorithmRet = stage->algorithm( mPipelineBlob );
+		StTimer.Off();
 		if ( algorithmRet == HERA_FAILURE )
 		{
 			if ( std::strcmp( stage->name().c_str(), "LandmarkDetector" ) == 0 )
@@ -199,6 +203,7 @@ HeraDetector::algorithm( uint8_t* const imageBuffer, HeraResult& heraResult )
 	makeGazeResult( heraResult );
 	makeCameraControlSignal( heraResult );
 
+	Timer.Off();
 	return res;
 }
 
diff --git a/craft/platform/framework/core/LocalDataBus.cpp b/craft/platform/framework/core/LocalDataBus.cpp
index 30102d962..e8f0bf1f6 100755
--- a/craft/platform/framework/core/LocalDataBus.cpp
+++ b/craft/platform/framework/core/LocalDataBus.cpp
@@ -237,10 +237,10 @@ DataBus::handleData()
 							TimeUtil::currentTimeNs<TimeUtil::TimePoint>();
 
 					const int32_t d = TimeUtil::durationMs<TimeUtil::TimePoint>( now, finish );
-					if ( d > 1 )
+				//	if ( d > 1 )
 					{
-						LOG_WARNING << "Callback runs for over 1ms : " << d << "ms";
-						DLOG_INFO <<
+						LOG_WARNING << "Callback runs for : " << d << "ms";
+						LOG_WARNING <<
 								"Callback start_time: " <<
 								TimeUtil::getTimestampOfTime<TimeUtil::TimePoint>( now ) <<
 								" end_time: " <<
diff --git a/craft/platform/framework/core/SubEngine.cpp b/craft/platform/framework/core/SubEngine.cpp
index 8d6c9ca5f..52e0627df 100755
--- a/craft/platform/framework/core/SubEngine.cpp
+++ b/craft/platform/framework/core/SubEngine.cpp
@@ -224,7 +224,9 @@ SubEngine::threadMain()
 		InputData d;
 		if ( mDataQueue.get( &d, 10 ) )
 		{
+			// SU::CoolTimer Timer((getName()+"\t"+getName()).c_str());
 			( void )processInThread( d.data, d.cookie );
+			// Timer.Off();
 			mDataQueue.pop();
 		}
 	}
@@ -363,4 +365,4 @@ SubEngine::pushToQueue( const LocalDataBus::DataContainer& data, const int32_t c
 	return ret;
 }
 
-} /* namespace CRAFT */
\ No newline at end of file
+} /* namespace CRAFT */
diff --git a/craft/platform/framework/engine/actionRecognition/ActionRecognitionEngine.cpp b/craft/platform/framework/engine/actionRecognition/ActionRecognitionEngine.cpp
index 595a57058..50ee17b96 100644
--- a/craft/platform/framework/engine/actionRecognition/ActionRecognitionEngine.cpp
+++ b/craft/platform/framework/engine/actionRecognition/ActionRecognitionEngine.cpp
@@ -178,6 +178,7 @@ int32_t
 ActionRecognitionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t ret = FAILURE;
 
 	if ( cookie == REG_IDX_HETDATA )
@@ -214,6 +215,7 @@ ActionRecognitionEngine::processInThread(
 			DLOG_INFO << "check: " << hetdata << " : " << mActionRecognition;
 		}
 	}
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/engine/areaOfInterest/AoiEngine.cpp b/craft/platform/framework/engine/areaOfInterest/AoiEngine.cpp
index f864b93cd..0a1682c65 100644
--- a/craft/platform/framework/engine/areaOfInterest/AoiEngine.cpp
+++ b/craft/platform/framework/engine/areaOfInterest/AoiEngine.cpp
@@ -74,6 +74,7 @@ AoiEngine::shutdown()
 int32_t
 AoiEngine::processInThread( const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t res = SUCCESS;
 	if ( cookie == 0 )
 	{
@@ -165,6 +166,7 @@ AoiEngine::processInThread( const LocalDataBus::DataContainer& data, const int32
 		}
 	}
 
+	Timer.Off();
 	return res;
 }
 
diff --git a/craft/platform/framework/engine/cameraBlockage/CameraBlockageEngine.cpp b/craft/platform/framework/engine/cameraBlockage/CameraBlockageEngine.cpp
index 11261853d..458dd8eff 100644
--- a/craft/platform/framework/engine/cameraBlockage/CameraBlockageEngine.cpp
+++ b/craft/platform/framework/engine/cameraBlockage/CameraBlockageEngine.cpp
@@ -92,6 +92,7 @@ int32_t
 CameraBlockageEngine::processInThread( const LocalDataBus::DataContainer& data,
 		const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t res = FAILURE;
 	if ( cookie == 0 )
 	{
@@ -128,6 +129,7 @@ CameraBlockageEngine::processInThread( const LocalDataBus::DataContainer& data,
 		}
 	}
 
+	Timer.Off();
 	return res;
 }
 
diff --git a/craft/platform/framework/engine/distractionDetection/DistractionDetectionEngine.cpp b/craft/platform/framework/engine/distractionDetection/DistractionDetectionEngine.cpp
index 9ef2b26a5..665b1b5e6 100644
--- a/craft/platform/framework/engine/distractionDetection/DistractionDetectionEngine.cpp
+++ b/craft/platform/framework/engine/distractionDetection/DistractionDetectionEngine.cpp
@@ -200,6 +200,7 @@ int32_t
 DistractionDetectionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t ret = FAILURE;
 	if ( cookie == DIST_COOKIE_IDX_HET )
 	{
@@ -250,6 +251,7 @@ DistractionDetectionEngine::processInThread(
 		}
 	}
 
+	Timer.Off();
 	return ret;
 }
 
@@ -257,6 +259,7 @@ DistResult
 DistractionDetectionEngine::operateSublogics(
 		const DistEventData& distEvent, int32_t& distractionMeter )
 {
+	SU::CoolTimer Timer(("In DistractionDetectionEngine::operateSublogics\t" + getName()).c_str());
 	DistResult result;
 
 	for ( auto sublogic : mDistractionLogics )
@@ -264,6 +267,7 @@ DistractionDetectionEngine::operateSublogics(
 		result = result | sublogic->operation( distEvent, distractionMeter );
 	}
 
+	Timer.Off();
 	return result;
 }
 
@@ -291,6 +295,7 @@ DistractionDetectionEngine::getGazeDirection( const HetData::Ptr& hetData )
 DistEventData
 DistractionDetectionEngine::generateDistEvent( const HetData::Ptr& hetData )
 {
+	SU::CoolTimer Timer(("In DistractionDetectionEngine::generateDistEvent\t" + getName()).c_str());
 	DistEventData result;
 	mDirectionVector = getGazeDirection( hetData );
 
@@ -336,6 +341,7 @@ DistractionDetectionEngine::generateDistEvent( const HetData::Ptr& hetData )
 	mPreviousTime = currentTime;
 	mPreviousGazePosition = result.gazePosition;
 
+	Timer.Off();
 	return result;
 }
 
diff --git a/craft/platform/framework/engine/drowsinessDetection/DrowsinessDetectionEngine.cpp b/craft/platform/framework/engine/drowsinessDetection/DrowsinessDetectionEngine.cpp
index b055f04fa..e18950a46 100644
--- a/craft/platform/framework/engine/drowsinessDetection/DrowsinessDetectionEngine.cpp
+++ b/craft/platform/framework/engine/drowsinessDetection/DrowsinessDetectionEngine.cpp
@@ -163,6 +163,7 @@ int32_t
 DrowsinessDetectionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 
 	if ( cookie == DRW_COOKIE_IDX_FRAME )
 	{
@@ -242,6 +243,7 @@ DrowsinessDetectionEngine::processInThread(
 		mDrowsinessLevel->updateLevel( minimumLevel, true );
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/engine/drowsinessDetection/DrowsinessLongClosure.cpp b/craft/platform/framework/engine/drowsinessDetection/DrowsinessLongClosure.cpp
index d9ac4678f..6a3f63c28 100644
--- a/craft/platform/framework/engine/drowsinessDetection/DrowsinessLongClosure.cpp
+++ b/craft/platform/framework/engine/drowsinessDetection/DrowsinessLongClosure.cpp
@@ -70,6 +70,7 @@ DrowsinessLongClosure::~DrowsinessLongClosure()
 void
 DrowsinessLongClosure::processFrame( const TimeUtil::TimePoint& currentTime )
 {
+	SU::CoolTimer Timer("In DrowsinessLongClosure::processFrame\tdrowsiness detection");
 	mTimeTick = currentTime;
 
 	if ( mLCQueue.empty() == false )
@@ -81,11 +82,13 @@ DrowsinessLongClosure::processFrame( const TimeUtil::TimePoint& currentTime )
 	{
 		checkSleeping();
 	}
+	Timer.Off();
 }
 
 void
 DrowsinessLongClosure::processFatigue( const bool isLongClosure )
 {
+	SU::CoolTimer Timer("In DrowsinessLongClosure::processFatigue\tdrowsiness detection");
 	if ( ( mCurrentLCStatus == LCStatus::OPEN ) && ( isLongClosure == true ) )
 	{
 		onLongClosureClosed();
@@ -98,11 +101,13 @@ DrowsinessLongClosure::processFatigue( const bool isLongClosure )
 	{
 		// no statement
 	}
+	Timer.Off();
 }
 
 void
 DrowsinessLongClosure::processYawn()
 {
+	SU::CoolTimer Timer("In DrowsinessLongClosure::processYawn\tdrowsiness detection");
 	if ( mDrowsinessYawn != nullptr )
 	{
 		if ( ( mDrowsinessYawn->isYawnCandidateStartChanged() == true ) &&
@@ -133,6 +138,7 @@ DrowsinessLongClosure::processYawn()
 			}
 		}
 	}
+	Timer.Off();
 }
 
 
diff --git a/craft/platform/framework/engine/drowsinessDetection/DrowsinessPerclos.cpp b/craft/platform/framework/engine/drowsinessDetection/DrowsinessPerclos.cpp
index 782627219..c01a25686 100644
--- a/craft/platform/framework/engine/drowsinessDetection/DrowsinessPerclos.cpp
+++ b/craft/platform/framework/engine/drowsinessDetection/DrowsinessPerclos.cpp
@@ -52,6 +52,7 @@ DrowsinessPerclos::~DrowsinessPerclos()
 void
 DrowsinessPerclos::processFatigue( const double_t perclos )
 {
+	SU::CoolTimer Timer("In DrowsinessPerclos::processFatigue\tdrowsiness detection");
 	const PerclosState prevState = mPerclosState;
 
 	if ( perclos >= mSecondaryThreshPercent )
@@ -78,6 +79,7 @@ DrowsinessPerclos::processFatigue( const double_t perclos )
 		LOG_INFO_IF( DRW_LOG_EN ) << "PerclosState changed to " <<
 				static_cast<int32_t>( mPerclosState ) << " - perclos : " << perclos;
 	}
+	Timer.Off();
 }
 
 
diff --git a/craft/platform/framework/engine/drowsinessDetection/DrowsinessYawn.cpp b/craft/platform/framework/engine/drowsinessDetection/DrowsinessYawn.cpp
index 8c379f306..07a0f9342 100644
--- a/craft/platform/framework/engine/drowsinessDetection/DrowsinessYawn.cpp
+++ b/craft/platform/framework/engine/drowsinessDetection/DrowsinessYawn.cpp
@@ -57,6 +57,7 @@ DrowsinessYawn::~DrowsinessYawn()
 void
 DrowsinessYawn::processFrame( const TimeUtil::TimePoint& currentTime )
 {
+	SU::CoolTimer Timer("In DrowsinessYawn::processFrame\tdrowsiness detection");
 	while ( mYawnQueue.empty() == false )
 	{
 		const int32_t queueingTime = TimeUtil::durationMs<TimeUtil::TimePoint>(
@@ -76,11 +77,13 @@ DrowsinessYawn::processFrame( const TimeUtil::TimePoint& currentTime )
 			break;
 		}
 	}
+	Timer.Off();
 }
 
 void
 DrowsinessYawn::processYawn( const int64_t startTime, const int64_t endTime )
 {
+	SU::CoolTimer Timer("In DrowsinessYawn::processYawn\tdrowsiness detection");
 	if ( ( mYawnCandidateStartChanged == true ) && ( mIsYawn == true ) )
 	{
 		YawnInfo yawnInfo;
@@ -93,6 +96,7 @@ DrowsinessYawn::processYawn( const int64_t startTime, const int64_t endTime )
 
 		checkYawnState();
 	}
+	Timer.Off();
 }
 
 
@@ -141,6 +145,7 @@ DrowsinessYawn::getYawnStateWithInt() const
 void
 DrowsinessYawn::updateYawnData( const bool yawnCandidateStarted, const int32_t yawnCount )
 {
+	SU::CoolTimer Timer("In DrowsinessYawn::updateYawnData\tdrowsiness detection");
 	mIsYawn = ( yawnCandidateStarted == false ) && ( yawnCount > mReceivedYawnCount );
 	mYawnCandidateStartChanged = mYawnCandidateStarted != yawnCandidateStarted;
 	mYawnCandidateStarted = yawnCandidateStarted;
@@ -153,6 +158,7 @@ DrowsinessYawn::updateYawnData( const bool yawnCandidateStarted, const int32_t y
 				"\n Yawn Count: " << yawnCount <<
 				"\n Yawn Detect: " << mIsYawn;
 	}
+	Timer.Off();
 }
 
 
diff --git a/craft/platform/framework/engine/faceRecognition/FaceRecognitionEngine.cpp b/craft/platform/framework/engine/faceRecognition/FaceRecognitionEngine.cpp
index aacee6bb3..59c1a2d89 100755
--- a/craft/platform/framework/engine/faceRecognition/FaceRecognitionEngine.cpp
+++ b/craft/platform/framework/engine/faceRecognition/FaceRecognitionEngine.cpp
@@ -367,6 +367,7 @@ int32_t
 FaceRecognitionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t result = FAILURE;
 
 	if( cookie == DataType::HET )
@@ -419,6 +420,7 @@ FaceRecognitionEngine::processInThread(
 		result = SUCCESS;
 	}
 
+	Timer.Off();
 	return result;
 }
 
@@ -426,6 +428,7 @@ void
 FaceRecognitionEngine::recognition( const HetData::Ptr& hetData,
 		FaceRecognitionData::Ptr& resData )
 {
+	SU::CoolTimer Timer(("In recognition\t" + getName()).c_str());
 	Core::FaceRecognition::FaceTrackingInfo faceTrkInfo;
 	Core::FaceRecognition::ExtraInfo extraInfo;
 	Core::FaceRecognition::ResultData resultData;
@@ -458,6 +461,7 @@ FaceRecognitionEngine::recognition( const HetData::Ptr& hetData,
 	{
 		LOG_ERROR << "FaceRecognitionEngine - recognition failed";
 	}
+	Timer.Off();
 }
 
 void
diff --git a/craft/platform/framework/engine/fatigueMetrics/Blink.cpp b/craft/platform/framework/engine/fatigueMetrics/Blink.cpp
index d78017af7..61a93b27c 100644
--- a/craft/platform/framework/engine/fatigueMetrics/Blink.cpp
+++ b/craft/platform/framework/engine/fatigueMetrics/Blink.cpp
@@ -24,6 +24,8 @@
 #include "Blink.h"
 #include <numeric>
 
+#include <util/Logger.h>
+
 namespace CRAFT
 {
 static bool
@@ -151,6 +153,7 @@ LongEyeClosure::clearQueue()
 bool
 LongEyeClosure::computeLongEyeClosure( double_t eyeClosureFused )
 {
+	SU::CoolTimer Timer("In LongEyeClosure::computeLongEyeClosure\tfatigue metrics");
 	float eyeClosure = eyeClosureFused;
 	EyeState es = getEyeStateFromEyeClosure( eyeClosure, mEyeClosureThreshold );
 	bool _isLongEyeClosure = false;
@@ -174,6 +177,7 @@ LongEyeClosure::computeLongEyeClosure( double_t eyeClosureFused )
 		}
 	}
 	return _isLongEyeClosure;
+	Timer.Off();
 }
 
 bool
@@ -225,6 +229,7 @@ FatigueData::BlinkInfo
 Blink::updateBlinkInfo ( const double_t eyeClosureLeft, const double_t eyeClosureRight,
 		const double_t eyeClosureFused, const double_t eyeClosureFusedConf )
 {
+	SU::CoolTimer Timer("In Blink::updateBlinkInfo\tfatigue metrics");
 	std::chrono::milliseconds sec( mIncrementSec );
 	mTs = mTs + sec;
 	double_t timeS = mTs.toSeconds();
@@ -243,6 +248,7 @@ Blink::updateBlinkInfo ( const double_t eyeClosureLeft, const double_t eyeClosur
 	blinkData.blinkFreq = blinkFreqInfo.first;
 	blinkData.blinkFreqConf = blinkFreqInfo.second;
 
+	Timer.Off();
 	return blinkData;
 }
 
diff --git a/craft/platform/framework/engine/fatigueMetrics/FatigueMetricsEngine.cpp b/craft/platform/framework/engine/fatigueMetrics/FatigueMetricsEngine.cpp
index b1b26875b..7094da645 100644
--- a/craft/platform/framework/engine/fatigueMetrics/FatigueMetricsEngine.cpp
+++ b/craft/platform/framework/engine/fatigueMetrics/FatigueMetricsEngine.cpp
@@ -106,6 +106,8 @@ int32_t
 FatigueMetricsEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
+
 	int32_t res = FAILURE;
 	if ( cookie == 0 )
 	{
@@ -135,6 +137,7 @@ FatigueMetricsEngine::processInThread(
 		}
 	}
 
+	Timer.Off();
 	return res;
 }
 
diff --git a/craft/platform/framework/engine/fatigueMetrics/Perclos.cpp b/craft/platform/framework/engine/fatigueMetrics/Perclos.cpp
index 442211824..5b70a172a 100755
--- a/craft/platform/framework/engine/fatigueMetrics/Perclos.cpp
+++ b/craft/platform/framework/engine/fatigueMetrics/Perclos.cpp
@@ -22,6 +22,8 @@
 #include "CommonInterface.h"
 #include <cmath>
 
+#include <util/Logger.h>
+
 #define ZNORM 750.0
 #define FPS_MAX 300
 
@@ -170,6 +172,7 @@ void
 Perclos::computeEyeClosureAndPerclos( const std::shared_ptr<HetData>& hetData,
 		std::shared_ptr<FatigueData>& fatigueData )
 {
+	SU::CoolTimer Timer("In Perclos::computeEyeClosureAndPerclos\tfatigue metrics");
 	double_t z = hetData->midEyePos3D.z * 1000.0; // (mm)
 
 	double_t eyeHeightLeft2d = getEyeHeightLeft2d( hetData->facePoints2dICS );
@@ -207,6 +210,7 @@ Perclos::computeEyeClosureAndPerclos( const std::shared_ptr<HetData>& hetData,
 	fatigueData->eyeClosure.eyeClosureFusedConf = static_cast<float_t>( eyeClosureFusedConf );
 	fatigueData->perclos = static_cast<float_t>( perclos );
 
+	Timer.Off();
 }
 
 double_t
diff --git a/craft/platform/framework/engine/het_hera/HeraSubEngine.cpp b/craft/platform/framework/engine/het_hera/HeraSubEngine.cpp
index 1ae5b73c5..590ce85d2 100644
--- a/craft/platform/framework/engine/het_hera/HeraSubEngine.cpp
+++ b/craft/platform/framework/engine/het_hera/HeraSubEngine.cpp
@@ -217,6 +217,7 @@ int32_t
 HeraSubEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t res = FAILURE;
 	if ( cookie == 0 )
 	{
@@ -246,6 +247,7 @@ HeraSubEngine::processInThread(
 		}
 	}
 
+	Timer.Off();
 	return res;
 }
 
diff --git a/craft/platform/framework/engine/spoofingDetection/SpoofingDetectionEngine.cpp b/craft/platform/framework/engine/spoofingDetection/SpoofingDetectionEngine.cpp
index 12cd9e79b..80a5c0f6c 100644
--- a/craft/platform/framework/engine/spoofingDetection/SpoofingDetectionEngine.cpp
+++ b/craft/platform/framework/engine/spoofingDetection/SpoofingDetectionEngine.cpp
@@ -188,6 +188,7 @@ int32_t
 SpoofingDetectionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t ret = FAILURE;
 
 	if ( cookie == DataType::HET )
@@ -219,6 +220,7 @@ SpoofingDetectionEngine::processInThread(
 		}
 	}
 
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/engine/yawnNSpeakingDetection/YawnNSpeakingDetectionEngine.cpp b/craft/platform/framework/engine/yawnNSpeakingDetection/YawnNSpeakingDetectionEngine.cpp
index 732619902..8dfd722b8 100644
--- a/craft/platform/framework/engine/yawnNSpeakingDetection/YawnNSpeakingDetectionEngine.cpp
+++ b/craft/platform/framework/engine/yawnNSpeakingDetection/YawnNSpeakingDetectionEngine.cpp
@@ -117,6 +117,8 @@ int32_t
 YawnNSpeakingDetectionEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
+
 	int32_t ret = FAILURE;
 
 	if ( cookie == 0 )
@@ -148,6 +150,7 @@ YawnNSpeakingDetectionEngine::processInThread(
 			}
 		}
 	}
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/support/aoiDevelopmentEngine/AoiDevEngine.cpp b/craft/platform/framework/support/aoiDevelopmentEngine/AoiDevEngine.cpp
index 282fcc0f9..58953e7c8 100755
--- a/craft/platform/framework/support/aoiDevelopmentEngine/AoiDevEngine.cpp
+++ b/craft/platform/framework/support/aoiDevelopmentEngine/AoiDevEngine.cpp
@@ -198,6 +198,7 @@ AoiDevEngine::process( const LocalDataBus::DataContainer& data, const int32_t co
 int32_t
 AoiDevEngine::processInThread( const LocalDataBus::DataContainer&, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch ( cookie )
 	{
 		case SELF_RENDER_COOKIE:
@@ -212,6 +213,7 @@ AoiDevEngine::processInThread( const LocalDataBus::DataContainer&, const int32_t
 			break;
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/commandServerEngine/CommandServerEngine.cpp b/craft/platform/framework/support/commandServerEngine/CommandServerEngine.cpp
index f18c8810d..fa9a5f3b0 100644
--- a/craft/platform/framework/support/commandServerEngine/CommandServerEngine.cpp
+++ b/craft/platform/framework/support/commandServerEngine/CommandServerEngine.cpp
@@ -134,6 +134,7 @@ int32_t
 CommandServerEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch( cookie )
 	{
 	case FACE_OP_IDX:
@@ -149,6 +150,8 @@ CommandServerEngine::processInThread(
 	default:
 		break;
 	}
+
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/dsmDemoEngine/DsmDemoEngine.cpp b/craft/platform/framework/support/dsmDemoEngine/DsmDemoEngine.cpp
index 4a4eeecb8..360b93e74 100755
--- a/craft/platform/framework/support/dsmDemoEngine/DsmDemoEngine.cpp
+++ b/craft/platform/framework/support/dsmDemoEngine/DsmDemoEngine.cpp
@@ -284,6 +284,7 @@ DsmDemoEngine::process( const LocalDataBus::DataContainer& data, const int32_t c
 int32_t
 DsmDemoEngine::processInThread( const LocalDataBus::DataContainer&, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch ( cookie )
 	{
 		case SELF_RENDER_COOKIE:
@@ -295,6 +296,7 @@ DsmDemoEngine::processInThread( const LocalDataBus::DataContainer&, const int32_
 			break;
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/frameRecorderEngine/FrameCapture.cpp b/craft/platform/framework/support/frameRecorderEngine/FrameCapture.cpp
index 7e40e1ac5..1890b2b53 100644
--- a/craft/platform/framework/support/frameRecorderEngine/FrameCapture.cpp
+++ b/craft/platform/framework/support/frameRecorderEngine/FrameCapture.cpp
@@ -97,6 +97,7 @@ FrameCapture::stop()
 bool
 FrameCapture::process( const FrameData::Ptr& frame )
 {
+	SU::CoolTimer Timer("In FrameCapture::process\tframe recoder");
 	bool ret;
 	if ( ( frame != nullptr ) && ( frame->buffer != nullptr ) )
 	{
@@ -117,6 +118,7 @@ FrameCapture::process( const FrameData::Ptr& frame )
 	{
 		ret = false;
 	}
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/support/frameRecorderEngine/FrameRecorderEngine.cpp b/craft/platform/framework/support/frameRecorderEngine/FrameRecorderEngine.cpp
index 127be6b82..c0921e694 100644
--- a/craft/platform/framework/support/frameRecorderEngine/FrameRecorderEngine.cpp
+++ b/craft/platform/framework/support/frameRecorderEngine/FrameRecorderEngine.cpp
@@ -115,6 +115,7 @@ int32_t
 FrameRecorderEngine::processInThread( const LocalDataBus::DataContainer& data,
 		const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t ret;
 	if ( cookie == 0 )
 	{
@@ -127,6 +128,7 @@ FrameRecorderEngine::processInThread( const LocalDataBus::DataContainer& data,
 	{
 		ret = FAILURE;
 	}
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/support/frameRecorderEngine/FrameRecording.cpp b/craft/platform/framework/support/frameRecorderEngine/FrameRecording.cpp
index 71afdacdb..ff0d2d7e0 100644
--- a/craft/platform/framework/support/frameRecorderEngine/FrameRecording.cpp
+++ b/craft/platform/framework/support/frameRecorderEngine/FrameRecording.cpp
@@ -104,6 +104,7 @@ void FrameRecording::release()
 bool
 FrameRecording::process( const FrameData::Ptr& frame )
 {
+	SU::CoolTimer Timer("In FrameRecording::process\tframe recoder");
 	bool ret;
 	if ( ( frame != nullptr ) && ( frame->buffer != nullptr ) )
 	{
@@ -122,6 +123,7 @@ FrameRecording::process( const FrameData::Ptr& frame )
 	{
 		ret = false;
 	}
+	Timer.Off();
 	return ret;
 }
 
diff --git a/craft/platform/framework/support/miniDemoEngine/MiniDemoEngine.cpp b/craft/platform/framework/support/miniDemoEngine/MiniDemoEngine.cpp
index 9cec65b58..d0325f9cb 100755
--- a/craft/platform/framework/support/miniDemoEngine/MiniDemoEngine.cpp
+++ b/craft/platform/framework/support/miniDemoEngine/MiniDemoEngine.cpp
@@ -313,6 +313,7 @@ MiniDemoEngine::process( const LocalDataBus::DataContainer& data, const int32_t
 int32_t
 MiniDemoEngine::processInThread( const LocalDataBus::DataContainer&, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch ( cookie )
 	{
 		case SELF_RENDER_COOKIE:
@@ -324,6 +325,7 @@ MiniDemoEngine::processInThread( const LocalDataBus::DataContainer&, const int32
 			break;
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/performanceMonitorEngine/PerformanceMonitorEngine.cpp b/craft/platform/framework/support/performanceMonitorEngine/PerformanceMonitorEngine.cpp
index 5d4a728d7..898dfb246 100755
--- a/craft/platform/framework/support/performanceMonitorEngine/PerformanceMonitorEngine.cpp
+++ b/craft/platform/framework/support/performanceMonitorEngine/PerformanceMonitorEngine.cpp
@@ -180,6 +180,7 @@ int32_t
 PerformanceMonitorEngine::processInThread(
 		const LocalDataBus::DataContainer&, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch ( cookie )
 	{
 		case DATA_COOKIE::FRAME_DATA_COOKIE:
@@ -198,6 +199,7 @@ PerformanceMonitorEngine::processInThread(
 			break;
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/resultRecorderEngine/ResultRecorderEngine.cpp b/craft/platform/framework/support/resultRecorderEngine/ResultRecorderEngine.cpp
index fe9d2ed4b..0c96e83bb 100644
--- a/craft/platform/framework/support/resultRecorderEngine/ResultRecorderEngine.cpp
+++ b/craft/platform/framework/support/resultRecorderEngine/ResultRecorderEngine.cpp
@@ -181,6 +181,7 @@ int32_t
 ResultRecorderEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch( cookie )
 	{
 	case COOKIE_IDX_FRAME:
@@ -286,6 +287,7 @@ ResultRecorderEngine::processInThread(
 	default:
 		break;
 	}
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/resultStreamingEngine/ResultStreamingEngine.cpp b/craft/platform/framework/support/resultStreamingEngine/ResultStreamingEngine.cpp
index 5b26e83a3..2070feaf6 100644
--- a/craft/platform/framework/support/resultStreamingEngine/ResultStreamingEngine.cpp
+++ b/craft/platform/framework/support/resultStreamingEngine/ResultStreamingEngine.cpp
@@ -190,6 +190,7 @@ int32_t
 ResultStreamingEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	switch( cookie )
 	{
 	case COOKIE_IDX_HET:
@@ -268,6 +269,7 @@ ResultStreamingEngine::processInThread(
 	default:
 		break;
 	}
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.cpp b/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.cpp
index 08c42d9e3..ed7dea778 100755
--- a/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.cpp
+++ b/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.cpp
@@ -292,12 +292,14 @@ int32_t
 SdkInterfaceEngine::processInThread(
 		const LocalDataBus::DataContainer& data, const int32_t cookie )
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	const auto idx = static_cast<uint32_t>( cookie );
 	if ( mReceiverHandlers.size() > idx )
 	{
 		mReceiverHandlers[idx]( data );
 	}
 
+	Timer.Off();
 	return SUCCESS;
 }
 
diff --git a/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.h b/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.h
index 8ba3120c1..cec895422 100755
--- a/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.h
+++ b/craft/platform/framework/support/sdkInterfaceEngine/SdkInterfaceEngine.h
@@ -122,6 +122,7 @@ template<> void
 SdkInterfaceEngine::_receiverHandler<DistractionData>(
 		const DistractionData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<DistractionData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mDistractionMethod != nullptr ) )
 	{
 		SdkDistractionResult distResult(
@@ -131,12 +132,14 @@ SdkInterfaceEngine::_receiverHandler<DistractionData>(
 		const auto res = mDistractionMethod->invoke( distResult );
 		logMethodCallResult( res, mDistractionMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<DrowsinessData>(
 		const DrowsinessData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<DrowsinessData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mDrowsinessMethod != nullptr ) )
 	{
 		SdkDrowsinessResult drowsResult(
@@ -145,12 +148,14 @@ SdkInterfaceEngine::_receiverHandler<DrowsinessData>(
 		const auto res = mDrowsinessMethod->invoke( drowsResult );
 		logMethodCallResult( res, mDrowsinessMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<CameraBlockageData>(
 		const CameraBlockageData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<CameraBlockageData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mCameraBlockageMethod != nullptr ) )
 	{
 		SdkCameraBlockageResult cbResult(
@@ -159,12 +164,14 @@ SdkInterfaceEngine::_receiverHandler<CameraBlockageData>(
 		const auto res = mCameraBlockageMethod->invoke( cbResult );
 		logMethodCallResult( res, mCameraBlockageMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<ActionRecognitionData>(
 		const ActionRecognitionData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<ActionRecognitionData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mActionRecognitionMethod != nullptr ) )
 	{
 		SdkActionRecognitionResult arResult(
@@ -177,12 +184,14 @@ SdkInterfaceEngine::_receiverHandler<ActionRecognitionData>(
 		const auto res = mActionRecognitionMethod->invoke( arResult );
 		logMethodCallResult( res, mActionRecognitionMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<HetData>(
 		const HetData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<HetData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mHetMethod != nullptr ) )
 	{
 		SdkHetResult hetResult;
@@ -293,12 +302,14 @@ SdkInterfaceEngine::_receiverHandler<HetData>(
 		const auto res = mHetMethod->invoke( hetResult );
 		logMethodCallResult( res, mHetMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<FaceRecognitionData>(
 		const FaceRecognitionData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<FaceRecognitionData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mFaceRecognitionMethod != nullptr ) )
 	{
 		SdkFaceRecognitionResult sdkResult;
@@ -322,12 +333,14 @@ SdkInterfaceEngine::_receiverHandler<FaceRecognitionData>(
 		const auto res = mFaceRecognitionMethod->invoke( sdkResult );
 		logMethodCallResult( res, mFaceRecognitionMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<FaceRecogOperationResult>(
 		const FaceRecogOperationResult::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<FaceRecogOperationResult>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mFaceRecognitionOpResultMethod != nullptr ) )
 	{
 		SdkFaceRecognitionOperationResult sdkOpResult;
@@ -339,12 +352,14 @@ SdkInterfaceEngine::_receiverHandler<FaceRecogOperationResult>(
 		const auto res = mFaceRecognitionOpResultMethod->invoke( sdkOpResult );
 		logMethodCallResult( res, mFaceRecognitionOpResultMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<FatigueData>(
 		const FatigueData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<FatigueData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mFatigueMethod != nullptr ) )
 	{
 		SdkFatigueResult fatigueResult;
@@ -376,12 +391,14 @@ SdkInterfaceEngine::_receiverHandler<FatigueData>(
 		const auto res = mFatigueMethod->invoke( fatigueResult );
 		logMethodCallResult( res, mFatigueMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<AoiData>(
 		const AoiData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<AoiData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mAoiMethod != nullptr ) )
 	{
 		SdkAoiResult aoiResult( dataPtr->frameId, dataPtr->aoiTypeIds, dataPtr->aoiTypeNames, dataPtr->rawPosX,
@@ -390,12 +407,14 @@ SdkInterfaceEngine::_receiverHandler<AoiData>(
 		const auto res = mAoiMethod->invoke( aoiResult );
 		logMethodCallResult( res, mAoiMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<YawnNSpeakingData>(
 		const YawnNSpeakingData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<YawnNSpeakingData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mYawnNSpeakingMethod != nullptr ) )
 	{
 		SdkYawnNSpeakingResult ynsResult(
@@ -412,12 +431,14 @@ SdkInterfaceEngine::_receiverHandler<YawnNSpeakingData>(
 		const auto res = mYawnNSpeakingMethod->invoke( ynsResult );
 		logMethodCallResult( res, mYawnNSpeakingMethod->getName() );
 	}
+	Timer.Off();
 }
 
 template<> void
 SdkInterfaceEngine::_receiverHandler<SpoofingData>(
 		const SpoofingData::Ptr& dataPtr )
 {
+	SU::CoolTimer Timer("In SdkInterfaceEngine::_receiverHandler<SpoofingData>\tsdk interface");
 	if ( ( dataPtr != nullptr ) && ( mSpoofingMethod != nullptr ) )
 	{
 		SdkSpoofingResult spoofingResult( dataPtr->frameId, dataPtr->result, dataPtr->confidence );
@@ -425,6 +446,7 @@ SdkInterfaceEngine::_receiverHandler<SpoofingData>(
 		const auto res = mSpoofingMethod->invoke( spoofingResult );
 		logMethodCallResult( res, mSpoofingMethod->getName() );
 	}
+	Timer.Off();
 }
 
 extern "C" std::shared_ptr<SdkInterfaceEngine> make_shared_class( const EngineDesc& desc,
diff --git a/craft/platform/framework/support/virtualHetEngine/VirtualHetEngine.cpp b/craft/platform/framework/support/virtualHetEngine/VirtualHetEngine.cpp
index c46f48d4d..637ab4039 100644
--- a/craft/platform/framework/support/virtualHetEngine/VirtualHetEngine.cpp
+++ b/craft/platform/framework/support/virtualHetEngine/VirtualHetEngine.cpp
@@ -113,6 +113,7 @@ VirtualHetEngine::shutdown()
 int32_t
 VirtualHetEngine::processInThread( const LocalDataBus::DataContainer& data, const int32_t cookie)
 {
+	SU::CoolTimer Timer(("In processInThread\t" + getName()).c_str());
 	int32_t ret = FAILURE;
 	if ( mNeedNextData == true )
 	{
@@ -163,6 +164,7 @@ VirtualHetEngine::processInThread( const LocalDataBus::DataContainer& data, cons
 	default:
 		break;
 	}
+	Timer.Off();
 	return ret;
 }
 
-- 
2.17.1

